import { GraphQLResolveInfo } from 'graphql'
import { getAttributes } from 'utils/Graphql.utils'
import {{modelName}} from 'model/{{modelName}}.model'
import { GraphqlContext } from 'interface/graphql/GraphqlContext.interface'

export const resolver = {

  {{modelName}}: {
  },

  Query: {
    {{modelName}}: async (parent, args, context: GraphqlContext, info: GraphQLResolveInfo) => {
      return {{modelName}}.findByPk(args.id, { attributes: getAttributes(info, {{modelName}}) })
    },
    {{modelName}}s: async (parent, args, context: GraphqlContext, info: GraphQLResolveInfo) => {
      const attributes = getAttributes(info, {{modelName}})
      return {{modelName}}.findAll({ attributes }) // TODO Filter
    }
  },

  Mutation: {
    Save{{modelName}}: async (parent, args) => {
      return {{modelName}}.create(args.input)
    },

    Delete{{modelName}}: async (parent, { id }) => {
      return {{modelName}}.destroy({ where: { id } })
    },

    Update{{modelName}}: async (parent, { id, input }, context: GraphqlContext, info: GraphQLResolveInfo) => {
      await {{modelName}}.update(input, { where: { id } })
      return {{modelName}}.findByPk(id, { attributes: getAttributes(info, {{modelName}}) })
    }
  }
}
